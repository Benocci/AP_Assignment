/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.assignment1ex1;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeSupport;
import java.util.ArrayList;
import java.util.Collections;

/**
 *
 * @author francesco
 */
public class EightBoard extends javax.swing.JFrame implements PropertyChangeListener{
    
    private ArrayList<EightTile> board = new ArrayList<EightTile>(); // Represents the tiles on the game board.

    /**
     * Creates new form EightBoard
     */
    public EightBoard() {
        initComponents();
        
        // Add tiles to the game board:
        this.board.add(eightTile1);
        this.board.add(eightTile2);
        this.board.add(eightTile3);
        this.board.add(eightTile4);
        this.board.add(eightTile5);
        this.board.add(eightTile6);
        this.board.add(eightTile7);
        this.board.add(eightTile8);
        this.board.add(eightTile9);
        
        // Add vetoable change listeners to tiles and property change listener to controller.
        for(EightTile et: board){
            et.addVetoableChangeListener(eightController1);
            this.addPropertyChangeListener(et);
        }
        
        // Add property change listener to controller and register it with the controller.
        this.addPropertyChangeListener(eightController1);
        eightController1.controllerAddPropertyChangeListener(this);
        
        // Add vetoable change listener to the controller for managing game state.
        this.vetos.addVetoableChangeListener(eightController1);
        
        // Add vetoable change listener to the flip button for managing flips.
        flip1.addVetoableChangeListener(eightController1);
        
        // Initialize the game board with a random permutation of tiles.
        this.firePropertyChange("restart", null, generatePermutationArray());
    }
    
    /**
     * DEBUG function: prints the current state of the game board.
     */
    public void DEBUG_printALL(){
        int i = 0;
        System.out.println("---- PRINT ALL IN BOARD ----");
        for(EightTile et: board){
            System.out.println("EightTile[" + i + "] = pos: " + et.getMyPosition() + ", label:" + et.getMyLabel());
            i++;
        }
        System.out.println("---- END PRINT ALL ----");
    }
    
    /**
     * Generates a random permutation of numbers from 1 to 9.
     * 
     * @return An ArrayList representing a random permutation of numbers from 1 to 9.
     */
    private ArrayList<Integer> generatePermutationArray(){
        ArrayList<Integer> numbers = new ArrayList<>();
        for (int i = 1; i <= 9; i++) {
            numbers.add(i);
        }
        
        Collections.shuffle(numbers);
        
        return numbers;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        flip1 = new com.mycompany.assignment1ex1.Flip();
        eightController1 = new com.mycompany.assignment1ex1.EightController();
        jButton1 = new javax.swing.JButton();
        eightTile1 = new com.mycompany.assignment1ex1.EightTile(1,1);
        eightTile2 = new com.mycompany.assignment1ex1.EightTile(2,2);
        eightTile9 = new com.mycompany.assignment1ex1.EightTile(9,9);
        eightTile3 = new com.mycompany.assignment1ex1.EightTile(3,3);
        eightTile4 = new com.mycompany.assignment1ex1.EightTile(4,4);
        eightTile5 = new com.mycompany.assignment1ex1.EightTile(5,5);
        eightTile6 = new com.mycompany.assignment1ex1.EightTile(6,6);
        eightTile7 = new com.mycompany.assignment1ex1.EightTile(7,7);
        eightTile8 = new com.mycompany.assignment1ex1.EightTile(8,8);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        flip1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flip1ActionPerformed(evt);
            }
        });

        jButton1.setText("RESTART");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        eightTile1.setText("1");
        eightTile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile1ActionPerformed(evt);
            }
        });

        eightTile2.setText("2");
        eightTile2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile2ActionPerformed(evt);
            }
        });

        eightTile9.setText(" ");
        eightTile9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile9ActionPerformed(evt);
            }
        });

        eightTile3.setText("3");
        eightTile3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile3ActionPerformed(evt);
            }
        });

        eightTile4.setText("4");
        eightTile4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile4ActionPerformed(evt);
            }
        });

        eightTile5.setText("5");
        eightTile5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile5ActionPerformed(evt);
            }
        });

        eightTile6.setText("6");
        eightTile6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile6ActionPerformed(evt);
            }
        });

        eightTile7.setText("7");
        eightTile7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile7ActionPerformed(evt);
            }
        });

        eightTile8.setText("8");
        eightTile8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(eightController1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addGap(14, 14, 14)
                        .addComponent(flip1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(eightTile1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(eightTile2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(eightTile3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(eightTile4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(eightTile5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(eightTile6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(eightTile7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(eightTile8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(eightTile9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(124, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {eightTile1, eightTile2, eightTile3, eightTile4, eightTile5, eightTile6, eightTile7, eightTile8});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eightTile1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightTile2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightTile3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eightTile4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightTile5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightTile6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eightTile9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightTile7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightTile8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eightController1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flip1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1))
                .addGap(58, 58, 58))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {eightTile1, eightTile2, eightTile3, eightTile4, eightTile5, eightTile6, eightTile7, eightTile8, eightTile9});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles property change events related to game state changes.
     * 
     * This method is called when a property change event related to game state changes
     * is fired. It updates the graphical representation of the game board based on the
     * property change event.
     * 
     * @param pce The property change event.
     */
    @Override
    public void propertyChange(PropertyChangeEvent pce) {
        // Check the type of property change event and update the game board accordingly.
        if("swap".equalsIgnoreCase(pce.getPropertyName())){
            // If it's a swap event, update the label of the corresponding tile.
            this.board.get((int) pce.getNewValue()).updateLabel((int) pce.getOldValue());
        }
        else if("flip".equals(pce.getPropertyName())){
            // If it's a flip event, update the labels of the two tiles involved in the flip.
            this.board.get(0).updateLabel((int) pce.getNewValue());
            this.board.get(1).updateLabel((int) pce.getOldValue());
        }
        
    }
    
    private void eightTile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile1ActionPerformed
        this.board.get(0).clickedTile();
    }//GEN-LAST:event_eightTile1ActionPerformed

    private void eightTile2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile2ActionPerformed
        this.board.get(1).clickedTile();
    }//GEN-LAST:event_eightTile2ActionPerformed

    private void eightTile3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile3ActionPerformed
        this.board.get(2).clickedTile();
    }//GEN-LAST:event_eightTile3ActionPerformed

    private void eightTile4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile4ActionPerformed
        this.board.get(3).clickedTile();
    }//GEN-LAST:event_eightTile4ActionPerformed

    private void eightTile5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile5ActionPerformed
        this.board.get(4).clickedTile();
    }//GEN-LAST:event_eightTile5ActionPerformed

    private void eightTile6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile6ActionPerformed
        this.board.get(5).clickedTile();
    }//GEN-LAST:event_eightTile6ActionPerformed

    private void eightTile7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile7ActionPerformed
        this.board.get(6).clickedTile();
    }//GEN-LAST:event_eightTile7ActionPerformed

    private void eightTile8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile8ActionPerformed
        this.board.get(7).clickedTile();
    }//GEN-LAST:event_eightTile8ActionPerformed

    private void eightTile9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile9ActionPerformed
        this.board.get(8).clickedTile();
    }//GEN-LAST:event_eightTile9ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ArrayList<Integer> permutation = generatePermutationArray();
        this.firePropertyChange("restart", null, permutation);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void flip1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flip1ActionPerformed
        this.flip1.clickedFlip(this.board.get(0).getMyLabel(), this.board.get(1).getMyLabel());
    }//GEN-LAST:event_flip1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EightBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EightBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EightBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EightBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EightBoard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.mycompany.assignment1ex1.EightController eightController1;
    private com.mycompany.assignment1ex1.EightTile eightTile1;
    private com.mycompany.assignment1ex1.EightTile eightTile2;
    private com.mycompany.assignment1ex1.EightTile eightTile3;
    private com.mycompany.assignment1ex1.EightTile eightTile4;
    private com.mycompany.assignment1ex1.EightTile eightTile5;
    private com.mycompany.assignment1ex1.EightTile eightTile6;
    private com.mycompany.assignment1ex1.EightTile eightTile7;
    private com.mycompany.assignment1ex1.EightTile eightTile8;
    private com.mycompany.assignment1ex1.EightTile eightTile9;
    private com.mycompany.assignment1ex1.Flip flip1;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

    private VetoableChangeSupport vetos = new VetoableChangeSupport( this );
}
